#!/usr/bin/env python3
"""
Script de debug para investigar problemas com o wall wetting adaptativo.
Analisa as poss√≠veis causas por que as corre√ß√µes n√£o est√£o acontecendo.
"""

import os
import re
from pathlib import Path

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def check_configuration_parameters():
    """Verifica se os par√¢metros de configura√ß√£o do Aquino est√£o definidos corretamente."""
    print_header("VERIFICANDO PAR√ÇMETROS DE CONFIGURA√á√ÉO")
    
    config_file = "firmware/integration/evotech_config.txt"
    if not os.path.exists(config_file):
        print("‚ùå ERRO: Arquivo evotech_config.txt n√£o encontrado!")
        return False
    
    # Par√¢metros obrigat√≥rios do modelo Aquino
    required_params = [
        "wwAquinoAccelThresh",
        "wwAquinoDecelThresh", 
        "wwAquinoMapAccelThresh",
        "wwAquinoMapDecelThresh",
        "wwAquinoMinLambdaErr",
        "wwAquinoTransMinDuration",
        "wwAquinoAnalysisMaxDuration",
        "wwAquinoBetaAccelGain",
        "wwAquinoBetaDecelGain",
        "wwAquinoBetaLeanThresh",
        "wwAquinoBetaRichThresh",
        "wwAquinoTauSettleThresh",
        "wwAquinoTauIdealFactor",
        "wwAquinoTauToleranceFactor",
        "wwAquinoTauOvershootMinDur",
        "wwAquinoTauOvershootMinMag",
        "wwAquinoTauOvershootGain",
        "wwAquinoTauSlowGain",
        "wwAquinoTauFastGain"
    ]
    
    with open(config_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    missing_params = []
    found_params = {}
    
    for param in required_params:
        # Procura defini√ß√£o do par√¢metro
        pattern = rf"float {param};.*?;.*?(\d+(?:\.\d+)?),.*?(\d+(?:\.\d+)?),.*?(-?\d+(?:\.\d+)?),.*?(-?\d+(?:\.\d+)?),.*?(\d+)"
        match = re.search(pattern, content)
        
        if match:
            # Extrai valores: scale, offset, min, max, digits
            scale, offset, min_val, max_val, digits = match.groups()
            found_params[param] = {
                'scale': float(scale),
                'offset': float(offset), 
                'min': float(min_val),
                'max': float(max_val),
                'digits': int(digits)
            }
            print(f"‚úÖ {param}: min={min_val}, max={max_val}, scale={scale}")
        else:
            missing_params.append(param)
            print(f"‚ùå {param}: N√ÉO ENCONTRADO")
    
    if missing_params:
        print(f"\n‚ö†Ô∏è  PAR√ÇMETROS FALTANDO ({len(missing_params)}):")
        for param in missing_params:
            print(f"   - {param}")
        return False
    
    # Verificar valores suspeitos (thresholds zerados)
    print(f"\nüìä VERIFICANDO VALORES SUSPEITOS:")
    suspicious = []
    
    for param, values in found_params.items():
        if "Thresh" in param and values['min'] == 0 and values['max'] == 0:
            suspicious.append(param)
            print(f"‚ö†Ô∏è  {param}: min=max=0 (threshold desabilitado?)")
        elif "Gain" in param and values['min'] == 0 and values['max'] == 0:
            suspicious.append(param)
            print(f"‚ö†Ô∏è  {param}: min=max=0 (ganho zerado?)")
    
    if not suspicious:
        print("‚úÖ Todos os valores parecem razo√°veis")
    
    return len(missing_params) == 0

def check_enable_flags():
    """Verifica flags de habilita√ß√£o do sistema."""
    print_header("VERIFICANDO FLAGS DE HABILITA√á√ÉO")
    
    # Verifica no evotech_config.txt
    config_file = "firmware/integration/evotech_config.txt"
    if os.path.exists(config_file):
        with open(config_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Procura flags relacionadas
        enable_flags = [
            "complexWallModel",
            "wwEnableAdaptiveLearning",
            "wwMinCoolantTemp"
        ]
        
        for flag in enable_flags:
            if flag in content:
                print(f"‚úÖ {flag}: ENCONTRADO na configura√ß√£o")
                # Extrai linha para mostrar configura√ß√£o
                for line in content.split('\n'):
                    if flag in line and not line.strip().startswith('//'):
                        print(f"   ‚Üí {line.strip()}")
                        break
            else:
                print(f"‚ùå {flag}: N√ÉO ENCONTRADO")
    else:
        print("‚ùå Arquivo de configura√ß√£o n√£o encontrado")

def analyze_conditions_chain():
    """Analisa a cadeia de condi√ß√µes que podem impedir as corre√ß√µes."""
    print_header("ANALISANDO CADEIA DE CONDI√á√ïES")
    
    print("üîó SEQU√äNCIA DE VERIFICA√á√ïES NO onFastCallback():")
    print()
    
    conditions = [
        ("1. Cranking", "!engine->rpmCalculator.isCranking()", "Se motor girando de partida ‚Üí abort"),
        ("2. Tau v√°lido", "tau >= 0.001f", "Se tau muito baixo ‚Üí abort"), 
        ("3. Beta v√°lido", "beta >= 0.01f", "Se beta muito baixo ‚Üí abort"),
        ("4. RPM m√≠nimo", "rpm >= 100", "Se RPM muito baixo ‚Üí abort"),
        ("5. Produto RPM√ótau", "rpm * tau >= 0.001f", "Se produto muito baixo ‚Üí abort"),
        ("6. Beta < Alpha", "beta <= alpha", "Se sistema subamortecido ‚Üí clamp beta"),
        ("7. Wall wetting habilitado", "wwEnableAdaptiveLearning == true", "Se adaptativo desabilitado ‚Üí abort"),
        ("8. Motor aquecido", "CLT >= wwMinCoolantTemp", "Se motor frio ‚Üí abort"),
        ("9. MAP v√°lido", "MAP sensor v√°lido", "Se MAP inv√°lido ‚Üí abort"),
        ("10. TPS v√°lido", "TPS sensor v√°lido", "Se TPS inv√°lido ‚Üí abort (cr√≠tico para Aquino)"),
        ("11. Lambda v√°lido", "0.5 < lambda < 3.5", "Se lambda inv√°lido ‚Üí n√£o coleta dados"),
        ("12. Target lambda v√°lido", "0.5 < targetLambda < 1.5", "Se target inv√°lido ‚Üí n√£o coleta dados"),
    ]
    
    for step, condition, description in conditions:
        print(f"{step}: {condition}")
        print(f"   {description}")
        print()
    
    print("üéØ CONDI√á√ïES PARA DETEC√á√ÉO DE TRANSIENTES (Aquino):")
    print()
    print("MAP Acelera√ß√£o: loadDerivative > wwAquinoMapAccelThresh")
    print("MAP Desacelera√ß√£o: loadDerivative < wwAquinoMapDecelThresh") 
    print("TPS Acelera√ß√£o: tpsDerivative > wwAquinoAccelThresh")
    print("TPS Desacelera√ß√£o: tpsDerivative < wwAquinoDecelThresh")
    print()
    print("‚ö†Ô∏è  SE NENHUM TRANSIENTE FOR DETECTADO ‚Üí Nenhuma corre√ß√£o acontece")

def check_potential_issues():
    """Identifica problemas potenciais que podem impedir as corre√ß√µes."""
    print_header("PROBLEMAS POTENCIAIS IDENTIFICADOS")
    
    issues = [
        {
            'title': 'Thresholds muito altos',
            'description': 'Se wwAquino*Thresh muito altos, transientes normais n√£o s√£o detectados',
            'solution': 'Reduzir thresholds: AccelThresh=30%/s, MapAccelThresh=20kPa/s'
        },
        {
            'title': 'Ganhos zerados', 
            'description': 'Se wwAquino*Gain = 0, corre√ß√µes s√£o calculadas como zero',
            'solution': 'Configurar ganhos: BetaGain=0.1, TauGain=0.1'
        },
        {
            'title': 'Temperatura muito alta',
            'description': 'Se wwMinCoolantTemp muito alto, sistema nunca habilita',
            'solution': 'Configurar temperatura razo√°vel: 60-80¬∞C'
        },
        {
            'title': 'Sensores inv√°lidos',
            'description': 'TPS, MAP ou Lambda inv√°lidos impedem funcionamento',
            'solution': 'Verificar calibra√ß√£o e wiring dos sensores'
        },
        {
            'title': 'Lambda fora da faixa',
            'description': 'Lambda fora de 0.5-3.5 ou target fora de 0.5-1.5',
            'solution': 'Verificar calibra√ß√£o do sensor lambda e target'
        },
        {
            'title': 'Transientes muito curtos',
            'description': 'Se transientes < wwAquinoTransMinDuration, s√£o ignorados',
            'solution': 'Reduzir dura√ß√£o m√≠nima para 0.2s'
        },
        {
            'title': 'Tabelas n√£o inicializadas',
            'description': 'Tabelas wwBetaCorrection/wwTauCorrection podem estar com valores inv√°lidos',
            'solution': 'Inicializar todas as c√©lulas com 1.0 (sem corre√ß√£o)'
        },
        {
            'title': 'Buffer underrun',
            'description': 'Buffers podem n√£o estar sendo preenchidos adequadamente',
            'solution': 'Verificar indexa√ß√£o dos buffers circulares'
        }
    ]
    
    for i, issue in enumerate(issues, 1):
        print(f"{i}. üö® {issue['title']}")
        print(f"   Problema: {issue['description']}")
        print(f"   Solu√ß√£o: {issue['solution']}")
        print()

def suggest_debug_code():
    """Sugere c√≥digo de debug para adicionar ao wall_fuel.cpp."""
    print_header("C√ìDIGO DE DEBUG SUGERIDO")
    
    debug_code = '''
// Adicionar no in√≠cio do onFastCallback() (ap√≥s verifica√ß√µes b√°sicas):
static int debugCounter = 0;
debugCounter++;

if (debugCounter % 200 == 0) { // Debug a cada 1 segundo (200Hz)
    efiPrintf("WW_DEBUG: enable=%d, adaptive=%d, CLT=%.1f, RPM=%.0f", 
              m_enable, engineConfiguration->wwEnableAdaptiveLearning,
              Sensor::get(SensorType::Clt).value_or(-999), 
              Sensor::getOrZero(SensorType::Rpm));
    
    if (m_adaptiveData.combinedTransientActive) {
        efiPrintf("WW_TRANSIENT: MAP_deriv=%.2f, TPS_deriv=%.2f, pos=%d, neg=%d",
                  m_adaptiveData.loadDerivative, m_adaptiveData.tpsDerivative,
                  m_adaptiveData.isPositiveTransient, m_adaptiveData.isNegativeTransient);
    }
    
    if (m_adaptiveData.collectingImmediate || m_adaptiveData.collectingProlonged) {
        efiPrintf("WW_COLLECTING: immediate=%d, prolonged=%d, duration=%.2f",
                  m_adaptiveData.collectingImmediate, m_adaptiveData.collectingProlonged,
                  m_adaptiveData.transientDuration);
    }
}

// Adicionar em applyCorrectionToTable() antes das aplica√ß√µes:
efiPrintf("WW_CORRECTION: beta=%.3f, tau=%.3f, rpm=%.0f, map=%.1f",
          betaCorrection, tauCorrection, rpm, map);
'''
    
    print("üìù Adicione este c√≥digo para debug:")
    print(debug_code)
    
    print("\nüîß Para ativar logs:")
    print("1. Adicionar o c√≥digo acima no wall_fuel.cpp")
    print("2. Recompilar firmware")
    print("3. Conectar console e observar logs 'WW_DEBUG', 'WW_TRANSIENT', 'WW_COLLECTING', 'WW_CORRECTION'")
    print("4. Fazer transientes (acelerar/desacelerar) e verificar se s√£o detectados")

def main():
    """Fun√ß√£o principal de debug."""
    print("üöó DEBUG DO WALL WETTING ADAPTATIVO")
    print("Investigando por que as corre√ß√µes n√£o est√£o acontecendo...")
    
    # Executa verifica√ß√µes
    config_ok = check_configuration_parameters()
    check_enable_flags()
    analyze_conditions_chain()
    check_potential_issues()
    suggest_debug_code()
    
    # Resumo final
    print_header("RESUMO E PR√ìXIMOS PASSOS")
    
    if config_ok:
        print("‚úÖ Configura√ß√£o dos par√¢metros Aquino: OK")
    else:
        print("‚ùå Configura√ß√£o dos par√¢metros Aquino: PROBLEMAS ENCONTRADOS")
    
    print("\nüîß PR√ìXIMOS PASSOS RECOMENDADOS:")
    print("1. Verificar se wwEnableAdaptiveLearning = true na configura√ß√£o")
    print("2. Verificar se wwMinCoolantTemp est√° configurado adequadamente (60-80¬∞C)")
    print("3. Verificar se thresholds Aquino n√£o est√£o muito altos")
    print("4. Adicionar c√≥digo de debug e observar logs durante transientes")
    print("5. Verificar se sensores TPS, MAP e Lambda est√£o funcionando")
    print("6. Verificar se tabelas de corre√ß√£o est√£o inicializadas com 1.0")
    
    print("\nüìã VALORES RECOMENDADOS PARA TESTE:")
    print("wwAquinoAccelThresh = 30.0    # %/s")
    print("wwAquinoMapAccelThresh = 20.0 # kPa/s") 
    print("wwAquinoBetaAccelGain = 0.1   # ganho moderado")
    print("wwAquinoTauSlowGain = 0.1     # ganho moderado")
    print("wwAquinoMinLambdaErr = 0.05   # erro m√≠nimo 5%")

if __name__ == "__main__":
    main() 